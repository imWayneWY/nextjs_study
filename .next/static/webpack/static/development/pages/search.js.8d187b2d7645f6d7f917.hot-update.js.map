{"version":3,"file":"static/webpack/static/development/pages/search.js.8d187b2d7645f6d7f917.hot-update.js","sources":["webpack:///./pages/search.js"],"sourcesContent":["import { withRouter } from 'next/router'\nimport { Row, Col, List, Pagination } from 'antd'\nimport { Item } from 'rc-menu'\nimport Link from 'next/link'\nimport Router from 'next/router'\nimport { useCallback, memo, isValidElement } from 'react'\nimport Repo from '../components/Repo'\n\nconst api = require('../lib/api')\n\nconst LANGUAGES = ['JavaScript', 'HTML', 'CSS', 'TypeScript', 'JAVA', 'Python']\nconst SORT_TYPES = [\n  {\n    name: 'Best Match'\n  },\n  {\n    name: 'Most Stars',\n    value: 'stars',\n    order: 'desc'\n  },\n  {\n    name: 'Fewest Stars',\n    value: 'stars',\n    order: 'asc'\n  },\n  {\n    name: 'Most Forks',\n    value: 'forks',\n    order: 'desc'\n  },\n  {\n    name: 'Fewest Forks',\n    value: 'forks',\n    order: 'asc'\n  },\n]\n\nconst selectedItemStyle = {\n  borderLeft: '2px solid #e36209',\n  fontWeight: 100,\n}\n\n/**\n * \n * sort: 排序方式\n * order: 排序顺序\n * lang: 仓库的项目开发主语言\n * page: 分页页面\n */\n\nfunction noop () {}\n\nconst per_page = 20\n\nconst FilterLink = memo(({ name, query, lang, sort, order, page }) => {\n  // const doSearch = (config) => {\n  //   Router.push({\n  //     pathname: '/search',\n  //     query: {\n  //       query,\n  //       lang,\n  //       order,\n  //       sort,\n  //     }\n  //   })\n  // }\n  let queryString = `?query=${query}`\n  if (lang) queryString += `&lang=${lang}`\n  if (sort) queryString += `&sort=${sort}&order=${order || 'desc'}`\n  if (page) queryString += `&page=${page}`\n\n  queryString += `&per_page=${per_page}`\n  \n  return (\n    <Link href={`/search${queryString}`}>\n      {isValidElement(name) ? name: <a>{name}</a>}\n    </Link>\n  )\n})\n  \nfunction Search({router, repos}) {\n  console.log(repos)\n\n  const { ...querys } = router.query\n  const { lang, sort, order, page } = router.query\n\n\n  return (\n    <div className='root'>\n      <Row gutter={20}>\n        <Col span={6}>\n          <List\n            bordered\n            header={<span className=\"list-header\">Language</span>}\n            style={{ marginBottom: 20 }}\n            dataSource={LANGUAGES}\n            renderItem={item => {\n              const selected = lang === item\n\n              return (\n                <List.Item style={selected ? selectedItemStyle : null}>\n                  {selected ? <span>{item}</span> : <FilterLink {...querys} lang={item} name={item}/>}\n                </List.Item>\n              )\n            }}\n          />\n          <List\n            bordered\n            header={<span className=\"list-header\">Sort</span>}\n            style={{ marginBottom: 20 }}\n            dataSource={SORT_TYPES}\n            renderItem={item => {\n              let selected = false\n              if (item.name === 'Best Match' && !sort) {\n                selected = true\n              } else if (item.value === sort && item.order === order) {\n                selected = true\n              }\n              return (\n                <List.Item style={selected ? selectedItemStyle : null}>\n                  {selected? <span>{item.name}</span> : <FilterLink {...querys} sort={item.value || ''} order={item.order || ''} name={item.name}/>}\n                </List.Item>\n              )\n            }}\n          />\n        </Col>\n        <Col span={18}>\n          <h3 className=\"repos-title\">{repos.total_count} repos in total</h3>\n          {\n            repos.items.map(repo => <Repo repo={repo} key={repo.id}/>)\n          }\n          <div className=\"pagination\">\n            <Pagination\n              pageSize={per_page}\n              current={Number(page) || 1}\n              total={repos.total_count}\n              onChange={noop}\n              itemRender={(page, type, ol) => {\n                const p = type === 'page' ? page : type==='prev' ? page - 1 : page + 1\n                const name = type === 'page' ? page : ol\n                return <FilterLink {...querys} page={p} name={name}/>\n              }}\n            />\n          </div>\n        </Col>\n      </Row>\n      <style jsx>{`\n        .root {\n          padding: 20px 0;\n        }\n        .list-header {\n          font-weight: 800;\n          font-size: 16px;\n        }\n        .repos-title {\n          border-bottom: 1px solid #eee;\n          font-size: 24px;\n          line-height: 50px;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nSearch.getInitialProps = async ({ ctx }) => {\n  const { query, sort, lang, order, page } = ctx.query\n\n  if (!query) {\n    return {\n      repos: {\n        total_count: 0\n      }\n    }\n  }\n\n  // ?q=react+language:javascript&sort=star&order=desc&page=2\n\n  let queryString = `?q=${query}`\n  if (lang) queryString += `language:${lang}`\n  if (sort) queryString += `&sort=${sort}&order=${order || 'desc'}`\n  if (page) queryString += `&page=${page}`\n  queryString += `&per_page=${per_page}`\n  console.log(queryString);\n  const result = await api.request({\n    url: `/search/repositories${queryString}`\n  }, ctx.req, ctx.res)\n\n  return {\n    repos: result.data\n  }\n}\n\nexport default withRouter(Search)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAOA;AACA;AACA;AAFA;AAKA;;;;;;;;AAQA;AACA;AACA;AAEA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAAA;AAIA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAbA;AAgBA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAjBA;AAoBA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AAAA;AACA;AATA;AA5CA;AAAA;AA0EA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AADA;AADA;AACA;AALA;AAWA;AAEA;AACA;AACA;AACA;AACA;AACA;AAlBA;AAAA;AAoBA;AADA;AACA;AApBA;AAmBA;AAnBA;AAwBA;AADA;AACA;AAxBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA2BA;;;;A","sourceRoot":""}