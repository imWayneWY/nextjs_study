{"version":3,"file":"static/webpack/static/development/pages/search.js.867f81d4b3fe06a34845.hot-update.js","sources":["webpack:///./components/Repo.jsx","webpack:///./pages/search.js"],"sourcesContent":["import Link from 'next/link'\nimport moment from 'moment'\nimport { Icon } from 'antd'\n\nfunction getLicense(license) {\n  return license ? `${license.spdx_id} license` : ''\n}\n\nfunction getLastUpdated(time) {\n  return moment(time).fromNow()\n}\nexport default ({ repo }) => {\n  return (\n    <div className=\"root\">\n      <div className=\"basic-info\">\n        <h3 className=\"repo-title\">\n          <Link href={`/detail?owner=${repo.owner.login}&name=${repo.name}`}>\n            <a>{repo.full_name}</a>\n          </Link>\n        </h3>\n        <p className=\"repo-desc\">{repo.description}</p>\n        <p className=\"other-info\">\n          {repo.license\n            ? <span className=\"license\">{getLicense(repo.license)}</span>\n            : null\n          }\n          <span className=\"last-updated\">{getLastUpdated(repo.updated_at)}</span>\n          <span className=\"open-issues\"> {repo.open_issues_count} open issues</span>\n        </p>\n      </div>\n      <div className=\"lang-star\">\n        <span className=\"lang\">{repo.language}</span>\n        <span className=\"star\">\n          { repo.stargazers_count } <Icon type=\"star\" theme=\"filled\" />\n        </span>\n      </div>\n      <style jsx>{`\n        .root {\n          display: flex;\n          justify-content: space-between;\n        }\n        .other-info > span + span {\n          margin-right: 10px;\n        }\n        .root + .root {\n          border-top: 1px solid #eee;\n          padding-top: 20px;\n        }\n        .repo-title {\n          font-size: 20px;\n        }\n        .lang-star {\n          display: flex;\n        }\n        .lang-star > span {\n          width: 120px;\n          text-align: right;\n        }\n        .repo-desc {\n          width: 400px;\n        }\n      `}</style>\n    </div>\n  )\n}\n","import { withRouter } from 'next/router'\nimport { Row, Col, List } from 'antd'\nimport { Item } from 'rc-menu'\nimport Link from 'next/link'\nimport Router from 'next/router'\nimport { useCallback, memo } from 'react'\nimport Repo from '../components/Repo'\n\nconst api = require('../lib/api')\n\nconst LANGUAGES = ['JavaScript', 'HTML', 'CSS', 'TypeScript', 'JAVA', 'Python']\nconst SORT_TYPES = [\n  {\n    name: 'Best Match'\n  },\n  {\n    name: 'Most Stars',\n    value: 'stars',\n    order: 'desc'\n  },\n  {\n    name: 'Fewest Stars',\n    value: 'stars',\n    order: 'asc'\n  },\n  {\n    name: 'Most Forks',\n    value: 'forks',\n    order: 'desc'\n  },\n  {\n    name: 'Fewest Forks',\n    value: 'forks',\n    order: 'asc'\n  },\n]\n\nconst selectedItemStyle = {\n  borderLeft: '2px solid #e36209',\n  fontWeight: 100,\n}\n\n/**\n * \n * sort: 排序方式\n * order: 排序顺序\n * lang: 仓库的项目开发主语言\n * page: 分页页面\n */\n\n\nconst FilterLink = memo(({ name, query, lang, sort, order }) => {\n  // const doSearch = (config) => {\n  //   Router.push({\n  //     pathname: '/search',\n  //     query: {\n  //       query,\n  //       lang,\n  //       order,\n  //       sort,\n  //     }\n  //   })\n  // }\n  let queryString = `?query=${query}`\n  if (lang) queryString += `&lang=${lang}`\n  if (sort) queryString += `&sort=${sort}&order=${order || 'desc'}`\n  \n  return <Link href={`/search${queryString}`}><a>{name}</a></Link>\n})\n  \nfunction Search({router, repos}) {\n  console.log(repos)\n\n  const { ...querys } = router.query\n  const { lang, sort, order } = router.query\n\n\n  return (\n    <div className='root'>\n      <Row gutter={20}>\n        <Col span={6}>\n          <List\n            bordered\n            header={<span className=\"list-header\">Language</span>}\n            style={{ marginBottom: 20 }}\n            dataSource={LANGUAGES}\n            renderItem={item => {\n              const selected = lang === item\n\n              return (\n                <List.Item style={selected ? selectedItemStyle : null}>\n                  {selected ? <span>{item}</span> : <FilterLink {...querys} lang={item} name={item}/>}\n                </List.Item>\n              )\n            }}\n          />\n          <List\n            bordered\n            header={<span className=\"list-header\">Sort</span>}\n            style={{ marginBottom: 20 }}\n            dataSource={SORT_TYPES}\n            renderItem={item => {\n              let selected = false\n              if (item.name === 'Best Match' && !sort) {\n                selected = true\n              } else if (item.value === sort && item.order === order) {\n                selected = true\n              }\n              return (\n                <List.Item style={selected ? selectedItemStyle : null}>\n                  {selected? <span>{item.name}</span> : <FilterLink {...querys} sort={item.value || ''} order={item.order || ''} name={item.name}/>}\n                </List.Item>\n              )\n            }}\n          />\n        </Col>\n        <Col span={18}>\n          <h3 className=\"repos-title\">{repos.total_count}</h3>\n          {\n            repos.items.map(repo => <Repo repo={repo} key={repo.id}/>)\n          }\n        </Col>\n      </Row>\n      <style jsx>{`\n        .root {\n          padding: 20px 0;\n        }\n        .list-header {\n          font-weight: 800;\n          font-size: 16px;\n        }\n      `}</style>\n    </div>\n  )\n}\n\nSearch.getInitialProps = async ({ ctx }) => {\n  const { query, sort, lang, order, page } = ctx.query\n\n  if (!query) {\n    return {\n      repos: {\n        total_count: 0\n      }\n    }\n  }\n\n  // ?q=react+language:javascript&sort=star&order=desc&page=2\n\n  let queryString = `?q=${query}`\n  if (lang) queryString += `language:${lang}`\n  if (sort) queryString += `&sort=${sort}&order=${order || 'desc'}`\n  if (page) queryString += `&page=${page}`\n  console.log(queryString);\n  const result = await api.request({\n    url: `/search/repositories${queryString}`\n  }, ctx.req, ctx.res)\n\n  return {\n    repos: result.data\n  }\n}\n\nexport default withRouter(Search)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AAEA;AAAA;AAGA;AAAA;AACA;AAAA;AAGA;AAAA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AApBA;AAAA;AAmDA;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AChEA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAOA;AACA;AACA;AAFA;AAKA;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAGA;AAbA;AAgBA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAGA;AAjBA;AAoBA;AAAA;AACA;AAAA;AAEA;AAAA;AAAA;AAAA;AAAA;AAzCA;AAAA;AAwDA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AADA;AADA;AACA;AALA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAmBA;AADA;AACA;AAnBA;AAkBA;AAlBA;AAuBA;AADA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA0BA;;;;A","sourceRoot":""}