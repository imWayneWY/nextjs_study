{"version":3,"file":"static/webpack/static/development/pages/search.js.a1ab510d3ae8d3eeb673.hot-update.js","sources":["webpack:///./pages/search.js"],"sourcesContent":["import { withRouter } from 'next/router'\nimport { Row, Col, List } from 'antd'\nimport { Item } from 'rc-menu'\nimport Link from 'next/link'\nimport Router from 'next/router'\nimport { useCallback } from 'react'\n\nconst api = require('../lib/api')\n\nconst LANGUAGES = ['JavaScript', 'HTML', 'CSS', 'TypeScript', 'JAVA', 'Python']\nconst SORT_TYPES = [\n  {\n    name: 'Best Match'\n  },\n  {\n    name: 'Most Stars',\n    value: 'stars',\n    order: 'desc'\n  },\n  {\n    name: 'Fewest Stars',\n    value: 'stars',\n    order: 'asc'\n  },\n  {\n    name: 'Most Forks',\n    value: 'forks',\n    order: 'desc'\n  },\n  {\n    name: 'Fewest Forks',\n    value: 'forks',\n    order: 'asc'\n  },\n]\n\nconst selectedItemStyle = {\n  borderLeft: '2px solid #e36209',\n  fontWeight: 100,\n}\n\n/**\n * \n * sort: 排序方式\n * order: 排序顺序\n * lang: 仓库的项目开发主语言\n * page: 分页页面\n */\n\n\nconst FilterLink = ({ name, query, lang, sort, order }) => {\n  const doSearch = (config) => {\n    Router.push({\n      pathname: '/search',\n      query: {\n        query,\n        lang,\n        order,\n        sort,\n      }\n    })\n  }\nreturn <a onClick={doSearch}>{name}</a>\n}\n  \nfunction Search({router, repos}) {\n  console.log(repos)\n\n  const { ...querys } = router.query\n  const { lang, sort, order } = router.query\n\n\n  return (\n    <div className='root'>\n      <Row gutter={20}>\n        <Col span={6}>\n          <List\n            bordered\n            header={<span className=\"list-header\">Language</span>}\n            style={{ marginBottom: 20 }}\n            dataSource={LANGUAGES}\n            renderItem={item => {\n              const selected = querys[lang] === item\n\n              return (\n                <List.Item style={selected ? selectedItemStyle : null}>\n                  <FilterLink {...querys} lang={item} name={item}/>\n                </List.Item>\n              )\n            }}\n          />\n          <List\n            bordered\n            header={<span className=\"list-header\">Sort</span>}\n            style={{ marginBottom: 20 }}\n            dataSource={SORT_TYPES}\n            renderItem={item => {\n              let selected = false\n              if (item.name === 'Best Match' && !sort) {\n                selected = true\n              } else if (item.value === sort && item.order === order) {\n                selected = true\n              }\n              return (\n                <List.Item style={selected ? selectedItemStyle : null}>\n                  <FilterLink {...querys} sort={item.sort || ''} order={item.order || ''} name={item.name}/>\n                </List.Item>\n              )\n            }}\n          />\n        </Col>\n      </Row>\n    </div>\n  )\n}\n\nSearch.getInitialProps = async ({ ctx }) => {\n  const { query, sort, lang, order, page } = ctx.query\n\n  if (!query) {\n    return {\n      repos: {\n        total_count: 0\n      }\n    }\n  }\n\n  // ?q=react+language:javascript&sort=star&order=desc&page=2\n\n  let queryString = `?q=${query}`\n  if (lang) queryString += `language:${lang}`\n  if (sort) queryString += `&sort=${sort}&order=${order || 'desc'}`\n  if (page) queryString += `&page=${page}`\n  console.log(queryString);\n  const result = await api.request({\n    url: `/search/repositories${queryString}`\n  }, ctx.req, ctx.res)\n\n  return {\n    repos: result.data\n  }\n}\n\nexport default withRouter(Search)"],"mappings":";;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AADA;AAIA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAMA;AACA;AACA;AAHA;AAOA;AACA;AACA;AAFA;AAKA;;;;;;;;AASA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAJA;AAFA;AASA;AACA;AAAA;AAAA;AAAA;AACA;AACA;AACA;AAAA;AAAA;AACA;AACA;AAFA;AACA;AADA;AAAA;AAAA;AAAA;AAOA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAEA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AAEA;AACA;AAAA;AACA;AAAA;AAAA;AAGA;AAbA;AAgBA;AACA;AAAA;AAAA;AACA;AAAA;AAAA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAAA;AACA;AAAA;AAAA;AAAA;AAGA;AAjBA;AAuBA;AACA;AACA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AADA;AAKA;AACA;AADA;AADA;AACA;AALA;AAWA;AAEA;AACA;AACA;AACA;AACA;AAjBA;AAAA;AAmBA;AADA;AACA;AAnBA;AAkBA;AAlBA;AAuBA;AADA;AACA;AAvBA;AAAA;AAAA;AAAA;AAAA;AAAA;AAAA;AACA;AADA;AAAA;AAAA;AAAA;AACA;AA0BA;;;;A","sourceRoot":""}